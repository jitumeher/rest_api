<?php
defined ( 'BASEPATH' ) or exit ( 'No direct script access allowed' );

// This can be removed if you use __autoload() in config.php OR use Modular Extensions
require APPPATH . '/libraries/REST_Controller.php';

/**
 * This is an example of a few basic user interaction methods you could use
 * all done with a hardcoded array
 *
 * @package CodeIgniter
 * @subpackage Rest Server
 * @category Controller
 * @author Phil Sturgeon, Chris Kacerguis
 * @license MIT
 * @link https://github.com/chriskacerguis/codeigniter-restserver
 */
class User_Controller extends REST_Controller {
	function __construct() {
		// Construct the parent class
		parent::__construct ();
		$this->load->database ();
		$this->load->model ( "User_model" );
	}
	public function profile_post() {
		$http_header = getallheaders ();
		$token = $http_header ['token'];
		$tokenResponse=$this->checkUser($token);
		 if ($tokenResponse->count >0) {
			$response = $this->User_model->profile ( $tokenResponse->userId );
			$this->set_response ( $response [0], REST_Controller::HTTP_FOUND );
		} else {
			$message = [ 
					'status' => false, // Automatically generated by the model
					'error' => "invalid token" 
			];
			$this->set_response ( $message, REST_Controller::HTTP_EXPECTATION_FAILED ); // CREATED (201) being the HTTP response code
		} 
	}
	public function updateprofile_post() {
		$http_header = getallheaders ();
		$token = $http_header ['token'];
		$userId = $this->post ( 'userId' );
		$data = array (
				'NAME' => $this->post ( 'name' ),
				'MOBILE' => $this->post ( 'mobile' ),
				'ADDRESS' => $this->post ( 'address' ),
				'GENDER' => $this->post ( 'gender' ),
				'STATE' => $this->post ( 'states' ) 
		);
		$tokenResponse=$this->checkUser($token);
		if ($tokenResponse->count) {
			$response = $this->User_model->updateprofile ( $tokenResponse->userId, $data );
			$message = [
					'status' => 'success'// Automatically generated by the model
			];
			$this->set_response ( $message, REST_Controller::HTTP_GONE ); // CREATED (201) being the HTTP response code
		} else {
			$message = [ 
					'status' => false, // Automatically generated by the model
					'error' => "invalid token" 
			];
			$this->set_response ( $message, REST_Controller::HTTP_EXPECTATION_FAILED ); // CREATED (201) being the HTTP response code
		}
	}
	public function bankdetails_get() {
		$http_header = getallheaders ();
		$token = $http_header ['token'];
		$tokenResponse=$this->checkUser($token);
		if ($tokenResponse->count) {
			$response = $this->User_model->bankdetails( $tokenResponse->userId );
			$this->set_response ( $response [0], REST_Controller::HTTP_FOUND );
		} else {
			$message = [
					'status' => false, // Automatically generated by the model
					'error' => "invalid token"
			];
			$this->set_response ( $message, REST_Controller::HTTP_EXPECTATION_FAILED ); // CREATED (201) being the HTTP response code
		}
	}
	public function updatebankdetails_post() {
		$http_header = getallheaders ();
		$token = $http_header ['token'];
		$data = array (
				'BANK_ACC_NO' => $this->post ( 'bankAccNo' ),
				'BANK_ACC_NAME' => $this->post ( 'bankAccName' ),
				'BANK_NAME' => $this->post ( 'bankName' ),
				'BRANCH_NAME' => $this->post ( 'branchName' ),
				'IFSC_CODE' => $this->post ( 'ifscCode' ),
				'IMPS_NO' => $this->post ( 'impsNo' ),
				'IMPS_MOBILE' => $this->post ( 'impsMobile' )
		);
		$tokenResponse=$this->checkUser($token);
		if ($tokenResponse->count) {
			$response = $this->User_model->updatebankdetails( $tokenResponse->userId, $data );
			$message = [
					'status' => 'success'// Automatically generated by the model
			];
			$this->set_response ( $message, REST_Controller::HTTP_GONE ); // CREATED (201) being the HTTP response code
		} else {
			$message = [
					'status' => false, // Automatically generated by the model
					'error' => "invalid token"
			];
			$this->set_response ( $message, REST_Controller::HTTP_EXPECTATION_FAILED ); // CREATED (201) being the HTTP response code
		}
	}
	
	public function usermessages_get() {
		$http_header = getallheaders ();
		$token = $http_header ['token'];
		$tokenResponse=$this->checkUser($token);
		if ($tokenResponse->count) {
			$response = $this->User_model->usermessages( $tokenResponse->userId );
			$this->set_response ( $response, REST_Controller::HTTP_FOUND );
		} else {
			$message = [
					'status' => false, // Automatically generated by the model
					'error' => "invalid token"
			];
			$this->set_response ( $message, REST_Controller::HTTP_EXPECTATION_FAILED ); // CREATED (201) being the HTTP response code
		}
	}
	public function usermessages_post() {
		$http_header = getallheaders ();
		$token = $http_header ['token'];
		$tokenResponse=$this->checkUser($token);
		$data = array (
				'SENDER_ID' => $tokenResponse->userId,
				'RECEIVER_ID' => $this->post ( 'receiverId' ),
				'SUBJECT' => $this->post ( 'subject' ),
				'MESSAGE' => $this->post ( 'message' )
		);
		if ($tokenResponse->count) {
			$response = $this->User_model->updateusermessages($data );
			$message = [
					'status' => 'success'// Automatically generated by the model
			];
			$this->set_response ( $message, REST_Controller::HTTP_GONE ); // CREATED (201) being the HTTP response code
		} else {
			$message = [
					'status' => false, // Automatically generated by the model
					'error' => "invalid token"
			];
			$this->set_response ( $message, REST_Controller::HTTP_EXPECTATION_FAILED ); // CREATED (201) being the HTTP response code
		}
	}
	
	public function adminmessages_get() {
		$http_header = getallheaders ();
		$token = $http_header ['token'];
		$tokenResponse=$this->checkUser($token);
		if ($tokenResponse->count) {
			$response = $this->User_model->adminmessages( $tokenResponse->userId );
			$this->set_response ( $response, REST_Controller::HTTP_FOUND );
		} else {
			$message = [
					'status' => false, // Automatically generated by the model
					'error' => "invalid token"
			];
			$this->set_response ( $message, REST_Controller::HTTP_EXPECTATION_FAILED ); // CREATED (201) being the HTTP response code
		}
	}
	public function adminmessages_post() {
		$http_header = getallheaders ();
		$token = $http_header ['token'];
		$tokenResponse=$this->checkUser($token);
		$data = array (
				'SENDER_ID' => $tokenResponse->userId,
				'RECEIVER_ID' => 'admin',
				'SUBJECT' => $this->post ( 'subject' ),
				'MESSAGE' => $this->post ( 'message' )
		);
		if ($tokenResponse->count) {
			$response = $this->User_model->updateadminmessages($data );
			$message = [
					'status' => 'success'// Automatically generated by the model
			];
			$this->set_response ( $message, REST_Controller::HTTP_GONE ); // CREATED (201) being the HTTP response code
		} else {
			$message = [
					'status' => false, // Automatically generated by the model
					'error' => "invalid token"
			];
			$this->set_response ( $message, REST_Controller::HTTP_EXPECTATION_FAILED ); // CREATED (201) being the HTTP response code
		}
	}
	
	public function updatepassword_update() {
		$http_header = getallheaders ();
		$token = $http_header ['token'];
		$tokenResponse=$this->checkUser($token);
		$oldPass=$this->post ( 'oldPass' );
		$newPass=$this->post ( 'newPass' );
		$rePass=$this->post ( 'rePass' );
		if ($tokenResponse->count >0) {
			if($newPass==$rePass){
				$response = $this->User_model->checkUserPassword($tokenResponse->userId,$oldPass );
				if($response->count >0){
					$data = array (
							'PASSWORD' => $this->post ( 'newPass' )
					);
					$this->User_model->updatepassword($tokenResponse->userId,$data );
					$message = [
							'status' => 'success'// Automatically generated by the model
					];
					$this->set_response ( $message, REST_Controller::HTTP_GONE ); // CREATED (201) being the HTTP response code
				}else{
					$message = [
							'status' => false, // Automatically generated by the model
							'error' => "invalid old password"
					];
					$this->set_response ( $message, REST_Controller::HTTP_EXPECTATION_FAILED ); // CREATED (201) being the HTTP response code
				}
				
			}else{
				$message = [
						'status' => false, // Automatically generated by the model
						'error' => "password/repassword mismatch"
				];
				$this->set_response ( $message, REST_Controller::HTTP_EXPECTATION_FAILED ); // CREATED (201) being the HTTP response code
			}
		} else {
			$message = [
					'status' => false, // Automatically generated by the model
					'error' => "invalid token"
			];
			$this->set_response ( $message, REST_Controller::HTTP_EXPECTATION_FAILED ); // CREATED (201) being the HTTP response code
		}
	}
	
	public function commit_get() {
		$http_header = getallheaders ();
		$token = $http_header ['token'];
		$tokenResponse=$this->checkUser($token);
		if ($tokenResponse->count >0) {
			$response = $this->User_model->commit( $tokenResponse->userId );
			$this->set_response ( $response, REST_Controller::HTTP_FOUND );
		} else {
			$message = [
					'status' => false, // Automatically generated by the model
					'error' => "invalid token"
			];
			$this->set_response ( $message, REST_Controller::HTTP_EXPECTATION_FAILED ); // CREATED (201) being the HTTP response code
		}
	}
	
	private function checkUser($token) {
		$time = time ();
		$response = $this->User_model->checkToken ( $token, $time );
		return $response;
	}
	
}
